{"/home/travis/build/npmtest/node-npmtest-html-to-json/test.js":"/* istanbul instrument in package npmtest_html_to_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-html-to-json/lib.npmtest_html_to_json.js":"/* istanbul instrument in package npmtest_html_to_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_html_to_json = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_html_to_json = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-html-to-json/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-html-to-json && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_html_to_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_html_to_json\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_html_to_json.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_html_to_json.rollup.js'] =\n            local.assetsDict['/assets.npmtest_html_to_json.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_html_to_json.__dirname + '/lib.npmtest_html_to_json.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-html-to-json/node_modules/html-to-json/index.js":"module.exports = require('./lib/htmlToJson');\n","/home/travis/build/npmtest/node-npmtest-html-to-json/node_modules/html-to-json/lib/htmlToJson.js":"var method = require('./method');\n\nmodule.exports = {\n  ParseContext: require('./ParseContext'),\n  Parser: require('./Parser'),\n  parse: require('./parse'),\n  request: require('./request'),\n  batch: require('./batch'),\n  createParser: function (filter) {\n    return new this.Parser(filter);\n  },\n  createMethod: function (filter) {\n    return method(filter);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-html-to-json/node_modules/html-to-json/lib/method.js":"var parse = require('./parse');\n\nfunction method (filter) {\n  var _method = function (html, callback) {\n    return parse(html, filter, callback);\n  };\n\n  _method.filter = filter;\n\n  return _method;\n}\n\nmodule.exports = method;\n","/home/travis/build/npmtest/node-npmtest-html-to-json/node_modules/html-to-json/lib/parse.js":"var cheerio = require('cheerio');\nvar ParseContext = require('./ParseContext');\nvar callbackify = require('./callbackify');\n\nfunction parse (html, filter, callback) {\n  var isCheerioObject = typeof html === 'object' && html._root._root;\n\n  if (typeof html !== 'string' && !isCheerioObject) {\n    throw new Error('HTML string required');\n  }\n\n  var $ = cheerio.load(html);\n\n  var parseContext = new ParseContext({\n    $: $,\n    $container: isCheerioObject? html: $.root(),\n    filter: filter\n  });\n\n  return callbackify(parseContext.parse(), callback);\n}\n\nmodule.exports = parse;\n","/home/travis/build/npmtest/node-npmtest-html-to-json/node_modules/html-to-json/lib/ParseContext.js":"var _ = require('lodash');\nvar Promise = require('bluebird');\nvar callbackify = require('./callbackify');\n\nfunction ParseContext (options) {\n  var context = this;\n\n  _.defaults(this, options, {\n    $container: null,\n    $: null,\n    filter: {},\n    parent: null\n  });\n\n  this.promises = Object.create(this.parent? this.parent.promises: {});\n}\n\nParseContext.prototype.parse = function (callback) {\n  var promise;\n\n  _.every(['Function', 'Array', 'Object'], function (type) {\n    if (_['is' + type](this.filter)) {\n      promise = this['_filterWith' + type]();\n      return false;\n    }\n\n    return true;\n  }, this);\n\n  if (!promise) {\n    promise = this._filterWithConstant();\n  }\n\n  return callbackify(promise, callback);\n};\n\nParseContext.prototype.map = function (selector, filter) {\n  var _this = this;\n  var $ = this.$;\n  var $els = this.$container.find(selector);\n\n  var promises = _.map($els, function (el) {\n    var subcontext = new ParseContext({\n      $container: $(el),\n      $: $,\n      filter: filter,\n      parent: this\n    });\n\n    return subcontext.parse();\n  }, this);\n\n  return Promise.all(promises);\n};\n\nParseContext.prototype.get = function (key) {\n  return Promise.resolve(this.promises['key:' + key]);\n};\n\nParseContext.prototype._filterWithFunction = function () {\n  return Promise.resolve(this.filter.call(this, this.$container, this.$));\n};\n\nParseContext.prototype._filterWithObject = function () {\n  var _this;\n  var filter = this.filter;\n  var parent = this.parent;\n  var $ = this.$;\n  var $container = this.$container;\n  var promises = this.promises;\n  var propertyMap = {};\n\n  if (filter.$container) {\n    $container = this.$(filter.$container);\n    delete filter.$container;\n  }\n\n  _.each(filter, function (subfilter, key) {\n    var subcontext = new ParseContext({\n      $container: $container,\n      $: $,\n      filter: subfilter,\n      parent: this\n    });\n\n    promises['key:' + key] = propertyMap[key] = new Promise(function (resolve, reject) {\n      process.nextTick(function () {\n        subcontext.parse().done(resolve, reject);\n      });\n    });\n  }, this);\n\n  return Promise.props(propertyMap);\n};\n\nParseContext.prototype._filterWithArray = function () {\n  var selector = this.filter[0];\n  var eachFilter = this.filter[1];\n  var afterFilter = this.filter[2];\n  var result = this.map(selector, eachFilter);\n\n  if (afterFilter) {\n    return result.then(afterFilter);\n  }\n\n  return result;\n};\n\nParseContext.prototype._filterWithConstant = function () {\n  return Promise.resolve(this.filter);\n};\n\nmodule.exports = ParseContext;\n","/home/travis/build/npmtest/node-npmtest-html-to-json/node_modules/html-to-json/lib/callbackify.js":"function callbackify (promise, callback) {\n  if (callback) {\n    promise.done(function (data) {\n      callback(null, data);\n    }, function (err) {\n      callback(err, null);\n    });\n  }\n\n  return promise;\n}\n\nmodule.exports = callbackify;\n","/home/travis/build/npmtest/node-npmtest-html-to-json/node_modules/html-to-json/lib/Parser.js":"var methods = {\n  parse: require('./parse'),\n  request: require('./request')\n};\n\nfunction Parser (filter) {\n  this.filter = filter;\n}\n\nParser.prototype.parse = function (html, callback) {\n  return methods.parse(html, this.filter, callback);\n};\n\nParser.prototype.method = function () {\n  var _this = this;\n\n  return function (html, callback) {\n    return _this.parse(html, callback);\n  };\n};\n\nParser.prototype.request = function (options, callback) {\n  return methods.request(options, this.filter, callback);\n};\n\nmodule.exports = Parser;\n","/home/travis/build/npmtest/node-npmtest-html-to-json/node_modules/html-to-json/lib/request.js":"var request = require('request');\nvar Promise = require('bluebird');\nvar parse = require('./parse');\nvar callbackify = require('./callbackify');\n\nmodule.exports = function (options, filter, callback) {\n  var promise;\n\n  promise = new Promise(function (resolve, reject) {\n    request(options, function (err, response) {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(response);\n    });\n  });\n\n  promise = promise.then(function (response) {\n    return parse(response.body, filter);\n  });\n\n  return callbackify(promise, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-html-to-json/node_modules/html-to-json/lib/batch.js":"var cheerio = require('cheerio');\nvar _ = require('lodash');\nvar Promise = require('bluebird');\nvar Parser = require('./Parser');\nvar ParseContext = require('./ParseContext');\nvar callbackify = require('./callbackify');\n\nfunction batch (html, dictionary, callback) {\n  var promise;\n  var $ = cheerio.load(html);\n  var context = new ParseContext({\n    $: $,\n    $container: $.root()\n  });\n\n  promise = Promise.props(_.mapValues(dictionary, function (filter) {\n    // Filter is wrapped by .createParser or .createMethod\n    if (filter.filter) {\n      filter = filter.filter;\n    }\n\n    context.filter = filter;\n\n    return context.parse();\n  }));\n\n  return callbackify(promise, callback);\n}\n\nmodule.exports = batch;\n"}